sources:
  - input: inputFile.jar # Path to the non obfuscated jar file
    output: outputFile.jar # Path to where the obfuscated jar file will be written
  - input: secondInput.jar # Optional extra sources
    output: secondOutput.jar
  - input: aClassFile.class # Direct classes can also be specified
    output: out.jar # However a jar will be outputted

# Path to where the obfuscation mappings will be outputted. You can use this to deobfuscate stack traces.
mappingFile: mappings.csv

# List of jar files to be used for inheritance information
# Directories can be specified, in which case they will be recursively searched for jar or zip files to include
libraries:
  - firstLibrary.jar
  - secondLibrary.jar

# List of class names to be excluded from all transformations
exclusions:
  - "com/example/application/api/" # Do not obfuscate api classes
  - "com/example/application/api/Api;" # ; means match exact name
  - "com/example/application/api/Api-" # - means names starting with but not exactly
  - "r#com\/example\/application\/api\/.*" # r# means regex
  - "@com/example/DontObfuscate" # @ means ignore anything with the exact annotation name

# List of class names to be completely ignored by the obfuscator
# This will help peformance but may prevent remapping from properly taking place
# Because of this I suggest you only do this for classes that are called but never inherited
hardExclusions:
  - com/example/library/

# Rename identifiers
# Deprecated - known to cause issues on complicated class structures
# May work for you, but issues are not planned to be fixed, instead you should use proguard for remapping
remap:
  enabled: false
  dictionary: "c0123456789abdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
  classes: true # obfuscate class names
  methods: true # obfuscate method names
  fields: true # obfuscate field names
  localVariables: true # obfuscate local variable names
  obfuscateEnums: true # obfuscate enum names 
  classPrefix: ""
  methodPrefix: ""
  fieldPrefix: ""
  localVariableName: "" # can be emptyto delete local variable names
  aggressiveOverloading: false # aggresively overload names (may break)  
  
  # per transformer exclusions inherit the root exclusions and can add to them
  exclusions:
    - com/example/application/reflection

# Remove source debug information (used in stacktraces)
sourceStrip:
  enabled: true
  lineNumbers: REMOVE # or KEEP. Specifies whether to remove line numbers. Keeping them can help stack traces.

# Remove extra information stored by the kotlin compiler
kotlinMetadata:
  enabled: true
  type: REMOVE # or CENSOR. Either remove 

# Crash reverse engineering tools like decompilers and dissasemblers
crasher:
  enabled: true
  checksums: true # crash some zip archiving tools
  decompilers: true # crash some decompilers
  antiAsm: true # crash the ow2 ASM library. May not work in conjunction with tools like Spigot and Forge
  recaf: true # hinder the functionality of the Recaf tool

# Ture static references into dynamic ones. Makes static reverse engineering of execution flow significantly harder.
indirection:
  enabled: true
  # indy method call transformations
  methodCalls: true
  # indy field access transformations
  fieldAccesses: true
  # raw memory variable access transformations - local variable accesses will get turned into direct heap accesses
  variableAccesses: true
  # minimum local variables in method to apply raw memory transforms
  # too low will result in worthless memory allocations for tiny methods
  variableAccessesMinVariables: 5

# Encrypt strings and dynamically decrypt them at runtime (with anti tampering checks)
stringObfuscation:
  enabled: true
  # Maximum chars in a string if it is to be obfuscated. Prevents UTF8 string too large errors.
  maxLength: 2000

# Substitute arithmetic operations with mixed boolean substitutes
arithmetic:
  enabled: true
  repeat: 3 # number of times to apply the arithmetic obfuscation (exponential). Around 2-4 is good.

# Obscure the control flow of the application
flowObfuscation:
  enabled: true
  severity: 5 # lower = more severe, larger file size, slower peformance; higher = less severe...
  mergeMethods: BLOAT_CLASSES # or EXISTING_CLASSES/NONE. Relocates methods into new classes, creating confusing methods that do not match the class they are situated in
  # hard set the version of merged classfiles (done by flowObfuscation.mergeMethods) - uses jvm version numbers as defined at https://docs.oracle.com/javase/specs/jvms/se15/html/jvms-4.html#jvms-4.1-200-B.2
  mergeVersion: 55
  arithmetic: false # old arithmetic obfuscation, now legacy
  noverify: false # create unverifiable bytecode that is very hard to decompile or dissasemble. Requires output application to be run with -noverify argument.
  java8: false # If the application only targets java 8 virtual machines by setting this to true the output application will NOT have to be run with -noverify

# Add additional arguments to method parameters which will be used for flow obfuscation. 
# This will make static analysis hard as the arguments will have to be retrieved from callsites
methodParameter:
  enabled: true

# Some minor peformance optimisations
optimisation:
  enabled: true
  mutableEnumValues: false # optimise enum values() method. May have unintended consequences if the returned array is modified

# Obfuscate number constants
numberObfuscation:
  enabled: true

# Cause undefined behaviour in application if system time is later than given time
expiryDate: "2022-03-14T09:26:53.590Z"

# Ignore warning errors about classes not being present in classpath
ignoreClassPathNotFound: false

# Use the java class loader to load libraries (not recommended)
useJavaClassloader: false

# Shuffle output
shuffleClasses: true
shuffleMethods: true
shuffleFields: true

resetLineProgress: true
printProgress: true
watermark: true
